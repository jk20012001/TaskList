 cocos/core/pipeline/define.ts | 47 +++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 47 insertions(+)

diff --git a/cocos/core/pipeline/define.ts b/cocos/core/pipeline/define.ts
index eec3a112e..0ef7e2d24 100644
--- a/cocos/core/pipeline/define.ts
+++ b/cocos/core/pipeline/define.ts
@@ -113,6 +113,7 @@ export enum PipelineGlobalBindings {
     UBO_GLOBAL,
     UBO_CAMERA,
     UBO_SHADOW,
+    UBO_DEBUG_VIEW,
 
     SAMPLER_SHADOWMAP,
     SAMPLER_ENVIRONMENT, // don't put this as the first sampler binding due to Mac GL driver issues: cubemap at texture unit 0 causes rendering issues
@@ -502,6 +503,52 @@ export class UBOUILocal { // pre one vec4
 localDescriptorSetLayout.layouts[UBOUILocal.NAME] = UBOUILocal.LAYOUT;
 localDescriptorSetLayout.bindings[UBOUILocal.BINDING] = UBOUILocal.DESCRIPTOR;
 
+/**
+ * @en The uniform buffer object for debug view
+ * @zh 渲染调试 UBO。
+ */
+export class UBODebugView {
+    public static readonly SINGLE_MODE = 0;
+    public static readonly LIGHTING_ENABLE_WITH_ALBEDO = UBODebugView.SINGLE_MODE + 1;
+    public static readonly MISC_ENABLE_CSM_LAYER_COLORATION = UBODebugView.LIGHTING_ENABLE_WITH_ALBEDO + 1;
+    public static readonly COMPOSITE_ENABLE_DIRECT_DIFFUSE = UBODebugView.MISC_ENABLE_CSM_LAYER_COLORATION + 1;
+    public static readonly COMPOSITE_ENABLE_DIRECT_SPECULAR = UBODebugView.COMPOSITE_ENABLE_DIRECT_DIFFUSE + 1;
+    public static readonly COMPOSITE_ENABLE_ENV_DIFFUSE = UBODebugView.COMPOSITE_ENABLE_DIRECT_SPECULAR + 1;
+    public static readonly COMPOSITE_ENABLE_ENV_SPECULAR = UBODebugView.COMPOSITE_ENABLE_ENV_DIFFUSE + 1;
+    public static readonly COMPOSITE_ENABLE_EMISSIVE = UBODebugView.COMPOSITE_ENABLE_ENV_SPECULAR + 1;
+    public static readonly COMPOSITE_ENABLE_LIGHT_MAP = UBODebugView.COMPOSITE_ENABLE_EMISSIVE + 1;
+    public static readonly COMPOSITE_ENABLE_SHADOW = UBODebugView.COMPOSITE_ENABLE_LIGHT_MAP + 1;
+    public static readonly COMPOSITE_ENABLE_AO = UBODebugView.COMPOSITE_ENABLE_SHADOW + 1;
+    public static readonly COMPOSITE_ENABLE_NORMAL_MAP = UBODebugView.COMPOSITE_ENABLE_AO + 1;
+    public static readonly COMPOSITE_ENABLE_FOG = UBODebugView.COMPOSITE_ENABLE_NORMAL_MAP + 1;
+    public static readonly COMPOSITE_ENABLE_TONE_MAPPING = UBODebugView.COMPOSITE_ENABLE_FOG + 1;
+    public static readonly COMPOSITE_ENABLE_GAMMA_CORRECTION = UBODebugView.COMPOSITE_ENABLE_TONE_MAPPING + 1;
+    public static readonly COUNT : number = UBODebugView.COMPOSITE_ENABLE_GAMMA_CORRECTION + 1;
+    public static readonly SIZE = UBODebugView.COUNT * 4;
+    public static readonly NAME = 'CCDebugView';
+    public static readonly BINDING = PipelineGlobalBindings.UBO_DEBUG_VIEW;
+    public static readonly DESCRIPTOR = new DescriptorSetLayoutBinding(UBODebugView.BINDING, DescriptorType.UNIFORM_BUFFER, 1, ShaderStageFlagBit.ALL);
+    public static readonly LAYOUT = new UniformBlock(SetIndex.GLOBAL, UBODebugView.BINDING, UBODebugView.NAME, [
+        new Uniform('cc_debug_view_single_mode', Type.FLOAT, 1),
+        new Uniform('cc_debug_view_lighting_enable_with_albedo', Type.FLOAT, 1),
+        new Uniform('cc_debug_view_misc_enable_csm_layer_coloration', Type.FLOAT, 1),
+        new Uniform('cc_debug_view_composite_enable_direct_diffuse', Type.FLOAT, 1),
+        new Uniform('cc_debug_view_composite_enable_direct_specular', Type.FLOAT, 1),
+        new Uniform('cc_debug_view_composite_enable_env_diffuse', Type.FLOAT, 1),
+        new Uniform('cc_debug_view_composite_enable_env_specular', Type.FLOAT, 1),
+        new Uniform('cc_debug_view_composite_enable_emissive', Type.FLOAT, 1),
+        new Uniform('cc_debug_view_composite_enable_light_map', Type.FLOAT, 1),
+        new Uniform('cc_debug_view_composite_enable_shadow', Type.FLOAT, 1),
+        new Uniform('cc_debug_view_composite_enable_ao', Type.FLOAT, 1),
+        new Uniform('cc_debug_view_composite_enable_normal_map', Type.FLOAT, 1),
+        new Uniform('cc_debug_view_composite_enable_fog', Type.FLOAT, 1),
+        new Uniform('cc_debug_view_composite_enable_tone_mapping', Type.FLOAT, 1),
+        new Uniform('cc_debug_view_composite_enable_gamma_correction', Type.FLOAT, 1),
+    ], 1);
+}
+globalDescriptorSetLayout.layouts[UBODebugView.NAME] = UBODebugView.LAYOUT;
+globalDescriptorSetLayout.bindings[UBODebugView.BINDING] = UBODebugView.DESCRIPTOR;
+
 /**
  * @en The sampler for joint texture
  * @zh 骨骼纹理采样器。
 cocos/core/pipeline/pipeline-ubo.ts | 34 +++++++++++++++++++++++++++++++++-
 1 file changed, 33 insertions(+), 1 deletion(-)

diff --git a/cocos/core/pipeline/pipeline-ubo.ts b/cocos/core/pipeline/pipeline-ubo.ts
index 5839f8aa2..4bf6deca3 100644
--- a/cocos/core/pipeline/pipeline-ubo.ts
+++ b/cocos/core/pipeline/pipeline-ubo.ts
@@ -23,7 +23,7 @@
  THE SOFTWARE.
  */
 
-import { UBOGlobal, UBOShadow, UBOCamera, UNIFORM_SHADOWMAP_BINDING,
+import { UBOGlobal, UBOShadow, UBOCamera, UBODebugView, UNIFORM_SHADOWMAP_BINDING,
     supportsR32FloatTexture, UNIFORM_SPOT_LIGHTING_MAP_TEXTURE_BINDING,
 } from './define';
 import { Device, BufferInfo, BufferUsageBit, MemoryUsageBit, DescriptorSet } from '../gfx';
@@ -38,6 +38,7 @@ import { DirectionalLight, SpotLight } from '../renderer/scene';
 import { RenderWindow } from '../renderer/core/render-window';
 import { builtinResMgr } from '../builtin/builtin-res-mgr';
 import { Texture2D } from '../assets';
+import { DebugView, DebugViewCompositeType } from './debug-view';
 
 const _matShadowView = new Mat4();
 const _matShadowProj = new Mat4();
@@ -300,9 +301,23 @@ export class PipelineUBO {
         Color.toArray(sv, shadowInfo.shadowColor, UBOShadow.SHADOW_COLOR_OFFSET);
     }
 
+    public static updateDebugViewUBOView (pipeline: RenderPipeline, bufferView: Float32Array) {
+        const device = pipeline.device;
+        const debugView = legacyCC.debugView;
+        const sv = bufferView;
+
+        sv[UBODebugView.SINGLE_MODE] = debugView.singleMode as number;
+        sv[UBODebugView.LIGHTING_ENABLE_WITH_ALBEDO] = debugView.lightingWithAlbedo ? 1.0 : 0.0;
+        sv[UBODebugView.MISC_ENABLE_CSM_LAYER_COLORATION] = debugView.csmLayerColoration ? 1.0 : 0.0;
+        for (let i = DebugViewCompositeType.DIRECT_DIFFUSE as number; i < DebugViewCompositeType.MAX_BIT_COUNT; i++) {
+            sv[UBODebugView.COMPOSITE_ENABLE_DIRECT_DIFFUSE + i] = debugView.isCompositeModeEnabled(i) ? 1.0 : 0.0;
+        }
+    }
+
     protected _globalUBO = new Float32Array(UBOGlobal.COUNT);
     protected _cameraUBO = new Float32Array(UBOCamera.COUNT);
     protected _shadowUBO = new Float32Array(UBOShadow.COUNT);
+    protected _debugViewUBO = new Float32Array(UBODebugView.COUNT);
     static _combineSignY = 0;
     protected declare _device: Device;
     protected declare _pipeline: RenderPipeline;
@@ -345,6 +360,7 @@ export class PipelineUBO {
             UBOCamera.SIZE,
         ));
         ds.bindBuffer(UBOCamera.BINDING, cameraUBO);
+
         const shadowUBO = device.createBuffer(new BufferInfo(
             BufferUsageBit.UNIFORM | BufferUsageBit.TRANSFER_DST,
             MemoryUsageBit.HOST | MemoryUsageBit.DEVICE,
@@ -352,6 +368,14 @@ export class PipelineUBO {
             UBOShadow.SIZE,
         ));
         ds.bindBuffer(UBOShadow.BINDING, shadowUBO);
+
+        const debugViewUBO = device.createBuffer(new BufferInfo(
+            BufferUsageBit.UNIFORM | BufferUsageBit.TRANSFER_DST,
+            MemoryUsageBit.HOST | MemoryUsageBit.DEVICE,
+            UBODebugView.SIZE,
+            UBODebugView.SIZE,
+        ));
+        ds.bindBuffer(UBODebugView.BINDING, debugViewUBO);
     }
 
     /**
@@ -414,6 +438,14 @@ export class PipelineUBO {
         }
     }
 
+    public updateDebugViewUBO () {
+        const ds = this._pipeline.descriptorSet;
+        const cmdBuffer = this._pipeline.commandBuffers;
+        PipelineUBO.updateDebugViewUBOView(this._pipeline, this._debugViewUBO);
+        ds.update();
+        cmdBuffer[0].updateBuffer(ds.getBuffer(UBODebugView.BINDING), this._debugViewUBO);
+    }
+
     public destroy () {
     }
 }
 cocos/core/pipeline/render-pipeline.ts | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/cocos/core/pipeline/render-pipeline.ts b/cocos/core/pipeline/render-pipeline.ts
index ed398cdc9..09f1649e2 100644
--- a/cocos/core/pipeline/render-pipeline.ts
+++ b/cocos/core/pipeline/render-pipeline.ts
@@ -391,6 +391,7 @@ export abstract class RenderPipeline extends Asset implements IPipelineEvent, Pi
         this._pipelineUBO.activate(this._device, this);
         // update global defines in advance here for deferred pipeline may tryCompile shaders.
         this._macros.CC_USE_HDR = this._pipelineSceneData.isHDR;
+        this._macros.CC_USE_DEBUG_VIEW = 0;
         this._generateConstantMacros();
         this._pipelineSceneData.activate(this._device);
 
@@ -398,6 +399,7 @@ export abstract class RenderPipeline extends Asset implements IPipelineEvent, Pi
             this._flows[i].activate(this);
         }
 
+        legacyCC.debugView.activate();
         return true;
     }
 
 cocos/core/pipeline/forward/forward-pipeline.ts | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/cocos/core/pipeline/forward/forward-pipeline.ts b/cocos/core/pipeline/forward/forward-pipeline.ts
index 8bb0a7c4b..0047c8991 100644
--- a/cocos/core/pipeline/forward/forward-pipeline.ts
+++ b/cocos/core/pipeline/forward/forward-pipeline.ts
@@ -29,7 +29,7 @@ import { RenderPipeline, IRenderPipelineInfo } from '../render-pipeline';
 import { ForwardFlow } from './forward-flow';
 import { RenderTextureConfig } from '../pipeline-serialization';
 import { ShadowFlow } from '../shadow/shadow-flow';
-import { UBOGlobal, UBOShadow, UBOCamera, UNIFORM_SHADOWMAP_BINDING, UNIFORM_SPOT_LIGHTING_MAP_TEXTURE_BINDING } from '../define';
+import { UBOGlobal, UBOShadow, UBOCamera, UBODebugView, UNIFORM_SHADOWMAP_BINDING, UNIFORM_SPOT_LIGHTING_MAP_TEXTURE_BINDING } from '../define';
 import { Swapchain, RenderPass } from '../../gfx';
 import { builtinResMgr } from '../../builtin';
 import { Texture2D } from '../../assets/texture-2d';
@@ -139,6 +139,7 @@ export class ForwardPipeline extends RenderPipeline {
             this._descriptorSet.getBuffer(UBOGlobal.BINDING).destroy();
             this._descriptorSet.getBuffer(UBOShadow.BINDING).destroy();
             this._descriptorSet.getBuffer(UBOCamera.BINDING).destroy();
+            this._descriptorSet.getBuffer(UBODebugView.BINDING).destroy();
             this._descriptorSet.getTexture(UNIFORM_SHADOWMAP_BINDING).destroy();
             this._descriptorSet.getTexture(UNIFORM_SPOT_LIGHTING_MAP_TEXTURE_BINDING).destroy();
         }
 cocos/core/pipeline/deferred/deferred-pipeline.ts | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/cocos/core/pipeline/deferred/deferred-pipeline.ts b/cocos/core/pipeline/deferred/deferred-pipeline.ts
index 1fa9d9e7b..a04e4e93c 100644
--- a/cocos/core/pipeline/deferred/deferred-pipeline.ts
+++ b/cocos/core/pipeline/deferred/deferred-pipeline.ts
@@ -39,7 +39,7 @@ import { Format, StoreOp,
     ColorAttachment, DepthStencilAttachment, RenderPass, LoadOp,
     RenderPassInfo, Texture, AccessFlagBit, Framebuffer,
     TextureInfo, TextureType, TextureUsageBit, FramebufferInfo, Swapchain, GeneralBarrierInfo } from '../../gfx';
-import { UBOGlobal, UBOCamera, UBOShadow, UNIFORM_SHADOWMAP_BINDING, UNIFORM_SPOT_LIGHTING_MAP_TEXTURE_BINDING } from '../define';
+import { UBOGlobal, UBOCamera, UBOShadow, UBODebugView, UNIFORM_SHADOWMAP_BINDING, UNIFORM_SPOT_LIGHTING_MAP_TEXTURE_BINDING } from '../define';
 import { Camera } from '../../renderer/scene';
 import { errorID } from '../../platform/debug';
 import { DeferredPipelineSceneData } from './deferred-pipeline-scene-data';
@@ -226,6 +226,7 @@ export class DeferredPipeline extends RenderPipeline {
             this._descriptorSet.getBuffer(UBOGlobal.BINDING).destroy();
             this._descriptorSet.getBuffer(UBOShadow.BINDING).destroy();
             this._descriptorSet.getBuffer(UBOCamera.BINDING).destroy();
+            this._descriptorSet.getBuffer(UBODebugView.BINDING).destroy();
             this._descriptorSet.getTexture(UNIFORM_SHADOWMAP_BINDING).destroy();
             this._descriptorSet.getTexture(UNIFORM_SPOT_LIGHTING_MAP_TEXTURE_BINDING).destroy();
         }
