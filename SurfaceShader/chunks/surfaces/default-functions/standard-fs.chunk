#ifndef CC_SURFACES_FRAGMENT_MODIFY_BASECOLOR_AND_TRANSPARENCY
vec4 SurfacesFragmentModifyBaseColorAndTransparency()
{
    return FSInput_vertexColor;
}
#endif


#ifndef CC_SURFACES_FRAGMENT_MODIFY_WORLD_NORMAL
vec3 SurfacesFragmentModifyWorldNormal()
{
    return normalize(FSInput_worldNormal);
}
#endif

#ifndef CC_SURFACES_FRAGMENT_MODIFY_WORLD_TANGENT_AND_BINORMAL
void SurfacesFragmentModifyWorldTangentAndBinormal(out vec3 worldTangent, out vec3 worldBinormal, vec3 worldNormal)
{
    vec3 tangent = FSInput_worldTangent;
    vec3 binormal = cross(worldNormal.xyz, FSInput_worldTangent) * FSInput_mirrorNormal;
#if CC_SURFACES_USE_NORMAL_MAP
    tangent = cross(binormal, worldNormal);
#endif

    worldTangent = normalize(tangent);
    worldBinormal = normalize(binormal);
}
#endif

#ifndef CC_SURFACES_FRAGMENT_MODIFY_EMISSIVE
vec3 SurfacesFragmentModifyEmissive()
{
    return vec3(0.0, 0.0, 0.0);
}
#endif

#ifndef CC_SURFACES_FRAGMENT_MODIFY_PBRPARAMS
vec4 SurfacesFragmentModifyPBRParams()
{
    // ao, roughness, metallic, ao, specularIntensity
    return vec4(1.0, 0.5, 0.0, 0.5);
}
#endif

// some material datas use shared raw data, avoid sample / calculate same raw data multiply times, use this function for better performance
// this function invokes at last
#ifndef CC_SURFACES_FRAGMENT_MODIFY_SHARED_DATA
void SurfacesFragmentModifySharedData(inout SurfacesMaterialData surfaceData)
{
}
#endif
