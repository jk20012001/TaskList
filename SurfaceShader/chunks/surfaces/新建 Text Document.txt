概念:
shading是组合材质参数和光照结果用的逻辑
surface主要和shading逻辑有关,和材质类型有一定的关系,可能多个材质共用一个surface,但是如果shading逻辑变了,surface就一定要变(如basic和adv PBR逻辑是相同的, 但pbr和toon就完全不同)	
shading-entry只和effect用途有关,比如rendertoXXX, forward, deferred
main()
{
	多个module functions用于计算surface / lighting / debugview / shading等各模块的数据
}


注意:
绝对不能和chunks根目录下的文件重名, 否则会造成#include <同名文件>错误的定位

文件夹说明:
Surface文件夹中的文件不可以使用任何effect中定义的参数

struct可以有多个,但数量尽量少,可以多个相似的surf共享一个struct

default-function中有Get/ModifySurfaceData的函数
	如果surface结构体变了,相应的default-function也要变,可以使用完全不同的名称和输出参数的default-function,可以参考toon的用法
	通常来说有较多参数都是共用的情况下, 就不需要重新写一套结构体, 可以用内部宏来定义和赋值增量数据, 如标准PBR下的各向异性/SSS等
	其中唯一一个特殊的函数是SurfacesFragmentModifyBaseColorAndTransparency,无论什么情况下都必须要实现一份,并在函数内做alphatest, 因为render-to-shadowmap要用alphaclip是通过它来完成的
	
module-function中是定义主函数中用到的vsoutput / surface / lighting / debugview / shading模块相关计算
	目前VS的变化都不大，都走的common，如果需要的话也可以像ps一样重写

effect-macros是将effect中用于UI显示的USE_XXX宏转成内部渲染所需的CC_SURFACES_USE_XXX,也可以根据effect用途来屏蔽某些宏
	在effect的macro-remapping中映射不同用户effect中用到的宏到Surface系统内定宏, 需要就定义,不需要就不定义	
	有些系统内定宏可能也需要转换为Surface系统内定宏, 如开启ReflectProbe的宏, 在烘焙Probe的Pass时也会走公共光照流程, 但此时需要临时禁用使用Probe的功能, 又不能更改系统宏的值, 只能将其临时定义为Surface系统宏来代替了, Surface内部就使用这个新宏来处理Probe的事情
	还有Aniso等
	LightMap专门用一个Surface专用宏而非系统宏,是为了在某些Pass中强行禁用LightMap以提升性能
所有宏都仍然用#if来使用, 另外都需要在common中添加补充定义, 即若未定义的话define成0, 这样无论材质处define与否,都可以识别
common头文件要晚于用户头文件包含,该头文件中会对一些漏定义的宏来补充定义

includes是effect中使用的头文件,用于简化effect的包含代码
	common是公共数据
	其他的是PS专用的针对不同材质和光照模型的surface相关数据include
	
	
	
	
特殊材质说明:
VS扩展方法: 也可以重写module-function和default-function,新增VSIntermediateData和VSOutput/PSInput的项并包在宏里
	比如地形: 需要clippos.xz作为uv来采图, 那么需要添加VS输出项,方法有两种:
		1. 专用: 添加vs对应的module-function和surface function输出这些UV项到IntermediateData和VSOutput, PS中直接用FSInput_XXX宏来获取新增的这些数据即可
		2. 通用: 新加一个macro添加VS输出新项clipPos, 这一堆UV直接在PS里采图之前根据FSInput_clipPos动态计算
				需要新加别的项都可以包在宏里控制,这样不会影响其他材质的性能
PS扩展方法: 渲染到XXX
			卡通描边: 用宏禁用所有光照和材质功能, 重写主函数, 其他都复用
			卡通光照模型: 完全重写surface结构体和对应流程, 复用主函数

			高级PBR(各向异性/SSS): 用宏来添加lightingIntermediateData和surfaceData数据, 可能需要重写lighting-model-function, 其他都复用
			Hair: 同上, 重写的lighting-model-function中需要对两份高光一起计算并输出, 其他都复用
			预计算的皮肤: 同上, 重写的lighting-model-function中需要调用用户函数SurfacesLightingModifySkinDiffuseLighting来采预积分图以计算diffuse, 其他都复用
			
			高级PBR(MultiLayer):光照流程本身有改动,需要对同样的光照模型使用多套参数计算多次并叠加
								用宏来添加lightingIntermediateData和surfaceData数据
								用宏来添加lightingResult数据, 主要是多套diffuse/specularColorWithLighting, 以及每层光照的计算结果
								lighting-flow必须重写, 需要多次调用光照和材质模型函数以计算上面添加的lightingResult数据项
								shading-model必须重写, 将多套lightingResult结果根据物理合成
			高级PBR(ClearCoat):	视渲染算法而定,最复杂的不过就是MutliLayer的方式
