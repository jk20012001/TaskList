// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.

#pragma extension([GL_EXT_shader_explicit_arithmetic_types_int32, __VERSION__ > 310, require])

#include <common>

#if CC_USE_BAKED_ANIMATION
#pragma builtin(local)
layout(set = 2, binding = 3) uniform CCSkinningTexture {
    highp vec4 cc_jointTextureInfo; // length, totalJoints, offset, invLength
};
#pragma builtin(local)
layout(set = 2, binding = 2) uniform CCSkinningAnimation {
    highp vec4 cc_jointAnimInfo; // frameID
};
#pragma builtin(local)
layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;
/**
 * Although tempting, don't opt the offset arithmetics out to CPU (could
 * be reduced to a single MAD). The enlarged numerical range could require
 * more precision than what's actually provided on some devices.
 */
void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)
{
#if CC_SURFACES_USE_INSTANCING
    highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;
#else
    highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;
#endif
    invSize = cc_jointTextureInfo.w;
    highp float tempY = floor(temp * invSize);
    x = floor(temp - tempY * cc_jointTextureInfo.x);
    y = (tempY + 0.5) * invSize;
}
#else
#pragma define JOINT_UNIFORM_CAPACITY 30
#pragma builtin(local)
layout(set = 2, binding = 3) uniform CCSkinning {
    highp vec4 cc_joints[JOINT_UNIFORM_CAPACITY * 3];
};
#endif

//#include <skinning-lbs>
#if CC_USE_BAKED_ANIMATION
  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE
    mat4 getJointMatrix (float i) {
      highp float x, y, invSize;
      CCGetJointTextureCoords(3.0, i, x, y, invSize);
      vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));
      vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));
      vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));
      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));
    }
  #else
    mat4 getJointMatrix (float i) {
      highp float x, y, invSize;
      CCGetJointTextureCoords(12.0, i, x, y, invSize);
      vec4 v1 = vec4(
        decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),
        decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),
        decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),
        decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))
      );
      vec4 v2 = vec4(
        decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),
        decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),
        decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),
        decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))
      );
      vec4 v3 = vec4(
        decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),
        decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),
        decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),
        decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))
      );
      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));
    }
  #endif
#else
  mat4 getJointMatrix (float i) {
    int idx = int(i);
    vec4 v1 = cc_joints[idx * 3];
    vec4 v2 = cc_joints[idx * 3 + 1];
    vec4 v3 = cc_joints[idx * 3 + 2];
    return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));
  }
#endif

mat4 skinMatrix () {
  vec4 joints = vec4(a_joints); //simple conversion of a_joints from unsigned integer to float to match function parameter type
  return getJointMatrix(joints.x) * a_weights.x
       + getJointMatrix(joints.y) * a_weights.y
       + getJointMatrix(joints.z) * a_weights.z
       + getJointMatrix(joints.w) * a_weights.w;
}

void CCSkin (inout vec4 position) {
  mat4 m = skinMatrix();
  position = m * position;
}

void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {
  mat4 m = skinMatrix();
  position = m * position;
  normal = (m * vec4(normal, 0.0)).xyz;
  tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;
}

// #include <skinning-dqs>
