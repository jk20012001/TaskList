 native/cocos/renderer/pipeline/Define.cpp | 16 ++++++++++++++++
 1 file changed, 16 insertions(+)

diff --git a/native/cocos/renderer/pipeline/Define.cpp b/native/cocos/renderer/pipeline/Define.cpp
index e7f388d5b..dea541f78 100644
--- a/native/cocos/renderer/pipeline/Define.cpp
+++ b/native/cocos/renderer/pipeline/Define.cpp
@@ -71,6 +71,22 @@ const gfx::UniformBlock UBOGlobal::LAYOUT = {
         {"cc_time", gfx::Type::FLOAT4, 1},
         {"cc_screenSize", gfx::Type::FLOAT4, 1},
         {"cc_nativeSize", gfx::Type::FLOAT4, 1},
+
+        {"cc_debug_view_single_mode", gfx::Type::FLOAT, 1},
+        {"cc_debug_view_lighting_enable_with_albedo", gfx::Type::FLOAT, 1},
+        {"cc_debug_view_misc_enable_csm_layer_coloration", gfx::Type::FLOAT, 1},
+        {"cc_debug_view_composite_enable_direct_diffuse", gfx::Type::FLOAT, 1},
+        {"cc_debug_view_composite_enable_direct_specular", gfx::Type::FLOAT, 1},
+        {"cc_debug_view_composite_enable_env_diffuse", gfx::Type::FLOAT, 1},
+        {"cc_debug_view_composite_enable_env_specular", gfx::Type::FLOAT, 1},
+        {"cc_debug_view_composite_enable_emissive", gfx::Type::FLOAT, 1},
+        {"cc_debug_view_composite_enable_light_map", gfx::Type::FLOAT, 1},
+        {"cc_debug_view_composite_enable_shadow", gfx::Type::FLOAT, 1},
+        {"cc_debug_view_composite_enable_ao", gfx::Type::FLOAT, 1},
+        {"cc_debug_view_composite_enable_normal_map", gfx::Type::FLOAT, 1},
+        {"cc_debug_view_composite_enable_fog", gfx::Type::FLOAT, 1},
+        {"cc_debug_view_composite_enable_tone_mapping", gfx::Type::FLOAT, 1},
+        {"cc_debug_view_composite_enable_gamma_correction", gfx::Type::FLOAT, 1},
     },
     1,
 };
 native/cocos/renderer/pipeline/forward/ForwardPipeline.cpp | 1 +
 1 file changed, 1 insertion(+)

diff --git a/native/cocos/renderer/pipeline/forward/ForwardPipeline.cpp b/native/cocos/renderer/pipeline/forward/ForwardPipeline.cpp
index 3b1438f29..6f02a3c24 100644
--- a/native/cocos/renderer/pipeline/forward/ForwardPipeline.cpp
+++ b/native/cocos/renderer/pipeline/forward/ForwardPipeline.cpp
@@ -145,6 +145,7 @@ bool ForwardPipeline::activeRenderer(gfx::Swapchain *swapchain) {
     // update global defines when all states initialized.
     _macros["CC_USE_HDR"] = static_cast<bool>(_pipelineSceneData->isHDR());
     _macros["CC_SUPPORT_FLOAT_TEXTURE"] = hasAnyFlags(_device->getFormatFeatures(gfx::Format::RGBA32F), gfx::FormatFeature::RENDER_TARGET | gfx::FormatFeature::SAMPLED_TEXTURE);
+    _macros["CC_USE_DEBUG_VIEW"] = static_cast<int32_t>(0);
 
     // step 2 create index buffer
     uint ibStride = 4;
 native/cocos/renderer/pipeline/PipelineUBO.cpp | 9 +++++++++
 1 file changed, 9 insertions(+)

diff --git a/native/cocos/renderer/pipeline/PipelineUBO.cpp b/native/cocos/renderer/pipeline/PipelineUBO.cpp
index 3dc86d483..954b19e06 100644
--- a/native/cocos/renderer/pipeline/PipelineUBO.cpp
+++ b/native/cocos/renderer/pipeline/PipelineUBO.cpp
@@ -77,6 +77,15 @@ void PipelineUBO::updateGlobalUBOView(const scene::Camera *camera, ccstd::array<
     uboGlobalView[UBOGlobal::NATIVE_SIZE_OFFSET + 1] = static_cast<float>(shadingHeight);
     uboGlobalView[UBOGlobal::NATIVE_SIZE_OFFSET + 2] = 1.0F / uboGlobalView[UBOGlobal::NATIVE_SIZE_OFFSET];
     uboGlobalView[UBOGlobal::NATIVE_SIZE_OFFSET + 3] = 1.0F / uboGlobalView[UBOGlobal::NATIVE_SIZE_OFFSET + 1];
+
+    // const debugView = legacyCC.debugView;
+    float zero = 0.0f, one = 0.0f;
+    uboGlobalView[UBOGlobal::DEBUG_VIEW_SINGLE_MODE_OFFSET] = zero;
+    uboGlobalView[UBOGlobal::DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO_OFFSET] = one;
+    uboGlobalView[UBOGlobal::DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION_OFFSET] = zero;
+    for (int i = 0; i < UBOGlobal::COUNT - UBOGlobal::DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE_OFFSET; i++) {
+        uboGlobalView[UBOGlobal::DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE_OFFSET + i] = one;
+    }
 }
 
 void PipelineUBO::updateCameraUBOView(const RenderPipeline *pipeline, float *output, const scene::Camera *camera) {
 native/cocos/renderer/pipeline/RenderPipeline.cpp | 1 +
 1 file changed, 1 insertion(+)

diff --git a/native/cocos/renderer/pipeline/RenderPipeline.cpp b/native/cocos/renderer/pipeline/RenderPipeline.cpp
index d3b37adad..8f99e3ce6 100644
--- a/native/cocos/renderer/pipeline/RenderPipeline.cpp
+++ b/native/cocos/renderer/pipeline/RenderPipeline.cpp
@@ -93,6 +93,7 @@ bool RenderPipeline::activate(gfx::Swapchain * /*swapchain*/) {
         flow->activate(this);
     }
 
+    //legacyCC.debugView.activate();
     return true;
 }
 
 native/cocos/renderer/pipeline/Define.h | 19 ++++++++++++++++++-
 1 file changed, 18 insertions(+), 1 deletion(-)

diff --git a/native/cocos/renderer/pipeline/Define.h b/native/cocos/renderer/pipeline/Define.h
index ece48593b..5983af52d 100644
--- a/native/cocos/renderer/pipeline/Define.h
+++ b/native/cocos/renderer/pipeline/Define.h
@@ -409,7 +409,24 @@ struct CC_DLL UBOGlobal {
     static constexpr uint TIME_OFFSET = 0;
     static constexpr uint SCREEN_SIZE_OFFSET = UBOGlobal::TIME_OFFSET + 4;
     static constexpr uint NATIVE_SIZE_OFFSET = UBOGlobal::SCREEN_SIZE_OFFSET + 4;
-    static constexpr uint COUNT = UBOGlobal::NATIVE_SIZE_OFFSET + 4;
+
+    static constexpr uint DEBUG_VIEW_SINGLE_MODE_OFFSET = UBOGlobal::NATIVE_SIZE_OFFSET + 4;
+    static constexpr uint DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO_OFFSET = UBOGlobal::DEBUG_VIEW_SINGLE_MODE_OFFSET + 1;
+    static constexpr uint DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION_OFFSET = UBOGlobal::DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO_OFFSET + 1;
+    static constexpr uint DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE_OFFSET = UBOGlobal::DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION_OFFSET + 1;
+    static constexpr uint DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR_OFFSET = UBOGlobal::DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE_OFFSET + 1;
+    static constexpr uint DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE_OFFSET = UBOGlobal::DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR_OFFSET + 1;
+    static constexpr uint DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR_OFFSET = UBOGlobal::DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE_OFFSET + 1;
+    static constexpr uint DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE_OFFSET = UBOGlobal::DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR_OFFSET + 1;
+    static constexpr uint DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP_OFFSET = UBOGlobal::DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE_OFFSET + 1;
+    static constexpr uint DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW_OFFSET = UBOGlobal::DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP_OFFSET + 1;
+    static constexpr uint DEBUG_VIEW_COMPOSITE_ENABLE_AO_OFFSET = UBOGlobal::DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW_OFFSET + 1;
+    static constexpr uint DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP_OFFSET = UBOGlobal::DEBUG_VIEW_COMPOSITE_ENABLE_AO_OFFSET + 1;
+    static constexpr uint DEBUG_VIEW_COMPOSITE_ENABLE_FOG_OFFSET = UBOGlobal::DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP_OFFSET + 1;
+    static constexpr uint DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING_OFFSET = UBOGlobal::DEBUG_VIEW_COMPOSITE_ENABLE_FOG_OFFSET + 1;
+    static constexpr uint DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION_OFFSET = UBOGlobal::DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING_OFFSET + 1;
+    static constexpr uint COUNT = UBOGlobal::DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION_OFFSET + 1;
+
     static constexpr uint SIZE = UBOGlobal::COUNT * 4;
     static constexpr uint BINDING = static_cast<uint>(PipelineGlobalBindings::UBO_GLOBAL);
     static const gfx::DescriptorSetLayoutBinding DESCRIPTOR;
 cocos/core/pipeline/define.ts | 39 ++++++++++++++++++++++++++++++++++++---
 1 file changed, 36 insertions(+), 3 deletions(-)

diff --git a/cocos/core/pipeline/define.ts b/cocos/core/pipeline/define.ts
index eec3a112e..b18235c91 100644
--- a/cocos/core/pipeline/define.ts
+++ b/cocos/core/pipeline/define.ts
@@ -171,9 +171,26 @@ export const bindingMappingInfo = new BindingMappingInfo(
  */
 export class UBOGlobal {
     public static readonly TIME_OFFSET = 0;
-    public static readonly NATIVE_SIZE_OFFSET = UBOGlobal.TIME_OFFSET + 4;
-    public static readonly SCREEN_SIZE_OFFSET = UBOGlobal.NATIVE_SIZE_OFFSET + 4;
-    public static readonly COUNT = UBOGlobal.SCREEN_SIZE_OFFSET + 4;
+    public static readonly SCREEN_SIZE_OFFSET = UBOGlobal.TIME_OFFSET + 4;
+    public static readonly NATIVE_SIZE_OFFSET = UBOGlobal.SCREEN_SIZE_OFFSET + 4;
+
+    public static readonly DEBUG_VIEW_SINGLE_MODE_OFFSET = UBOGlobal.NATIVE_SIZE_OFFSET + 4;
+    public static readonly DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO_OFFSET = UBOGlobal.DEBUG_VIEW_SINGLE_MODE_OFFSET + 1;
+    public static readonly DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION_OFFSET = UBOGlobal.DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO_OFFSET + 1;
+    public static readonly DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE_OFFSET = UBOGlobal.DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION_OFFSET + 1;
+    public static readonly DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR_OFFSET = UBOGlobal.DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE_OFFSET + 1;
+    public static readonly DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE_OFFSET = UBOGlobal.DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR_OFFSET + 1;
+    public static readonly DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR_OFFSET = UBOGlobal.DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE_OFFSET + 1;
+    public static readonly DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE_OFFSET = UBOGlobal.DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR_OFFSET + 1;
+    public static readonly DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP_OFFSET = UBOGlobal.DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE_OFFSET + 1;
+    public static readonly DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW_OFFSET = UBOGlobal.DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP_OFFSET + 1;
+    public static readonly DEBUG_VIEW_COMPOSITE_ENABLE_AO_OFFSET = UBOGlobal.DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW_OFFSET + 1;
+    public static readonly DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP_OFFSET = UBOGlobal.DEBUG_VIEW_COMPOSITE_ENABLE_AO_OFFSET + 1;
+    public static readonly DEBUG_VIEW_COMPOSITE_ENABLE_FOG_OFFSET = UBOGlobal.DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP_OFFSET + 1;
+    public static readonly DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING_OFFSET = UBOGlobal.DEBUG_VIEW_COMPOSITE_ENABLE_FOG_OFFSET + 1;
+    public static readonly DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION_OFFSET = UBOGlobal.DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING_OFFSET + 1;
+
+    public static readonly COUNT = UBOGlobal.DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION_OFFSET + 1;
     public static readonly SIZE = UBOGlobal.COUNT * 4;
 
     public static readonly NAME = 'CCGlobal';
@@ -183,6 +200,22 @@ export class UBOGlobal {
         new Uniform('cc_time', Type.FLOAT4, 1),
         new Uniform('cc_screenSize', Type.FLOAT4, 1),
         new Uniform('cc_nativeSize', Type.FLOAT4, 1),
+
+        new Uniform('cc_debug_view_single_mode', Type.FLOAT, 1),
+        new Uniform('cc_debug_view_lighting_enable_with_albedo', Type.FLOAT, 1),
+        new Uniform('cc_debug_view_misc_enable_csm_layer_coloration', Type.FLOAT, 1),
+        new Uniform('cc_debug_view_composite_enable_direct_diffuse', Type.FLOAT, 1),
+        new Uniform('cc_debug_view_composite_enable_direct_specular', Type.FLOAT, 1),
+        new Uniform('cc_debug_view_composite_enable_env_diffuse', Type.FLOAT, 1),
+        new Uniform('cc_debug_view_composite_enable_env_specular', Type.FLOAT, 1),
+        new Uniform('cc_debug_view_composite_enable_emissive', Type.FLOAT, 1),
+        new Uniform('cc_debug_view_composite_enable_light_map', Type.FLOAT, 1),
+        new Uniform('cc_debug_view_composite_enable_shadow', Type.FLOAT, 1),
+        new Uniform('cc_debug_view_composite_enable_ao', Type.FLOAT, 1),
+        new Uniform('cc_debug_view_composite_enable_normal_map', Type.FLOAT, 1),
+        new Uniform('cc_debug_view_composite_enable_fog', Type.FLOAT, 1),
+        new Uniform('cc_debug_view_composite_enable_tone_mapping', Type.FLOAT, 1),
+        new Uniform('cc_debug_view_composite_enable_gamma_correction', Type.FLOAT, 1),
     ], 1);
 }
 globalDescriptorSetLayout.layouts[UBOGlobal.NAME] = UBOGlobal.LAYOUT;
 cocos/core/pipeline/pipeline-ubo.ts | 10 ++++++++++
 1 file changed, 10 insertions(+)

diff --git a/cocos/core/pipeline/pipeline-ubo.ts b/cocos/core/pipeline/pipeline-ubo.ts
index 5839f8aa2..68279d632 100644
--- a/cocos/core/pipeline/pipeline-ubo.ts
+++ b/cocos/core/pipeline/pipeline-ubo.ts
@@ -38,6 +38,7 @@ import { DirectionalLight, SpotLight } from '../renderer/scene';
 import { RenderWindow } from '../renderer/core/render-window';
 import { builtinResMgr } from '../builtin/builtin-res-mgr';
 import { Texture2D } from '../assets';
+import { DebugView, DebugViewCompositeType } from './debug-view';
 
 const _matShadowView = new Mat4();
 const _matShadowProj = new Mat4();
@@ -67,6 +68,15 @@ export class PipelineUBO {
         fv[UBOGlobal.NATIVE_SIZE_OFFSET + 1] = shadingHeight;
         fv[UBOGlobal.NATIVE_SIZE_OFFSET + 2] = 1.0 / fv[UBOGlobal.NATIVE_SIZE_OFFSET];
         fv[UBOGlobal.NATIVE_SIZE_OFFSET + 3] = 1.0 / fv[UBOGlobal.NATIVE_SIZE_OFFSET + 1];
+
+        const debugView = legacyCC.debugView;
+
+        fv[UBOGlobal.DEBUG_VIEW_SINGLE_MODE_OFFSET] = debugView.singleMode as number;
+        fv[UBOGlobal.DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO_OFFSET] = debugView.lightingWithAlbedo ? 1.0 : 0.0;
+        fv[UBOGlobal.DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION_OFFSET] = debugView.csmLayerColoration ? 1.0 : 0.0;
+        for (let i = DebugViewCompositeType.DIRECT_DIFFUSE as number; i < DebugViewCompositeType.MAX_BIT_COUNT; i++) {
+            fv[UBOGlobal.DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE_OFFSET + i] = debugView.isCompositeModeEnabled(i) ? 1.0 : 0.0;
+        }
     }
 
     public static updateCameraUBOView (pipeline: RenderPipeline, bufferView: Float32Array,
 cocos/core/pipeline/render-pipeline.ts | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/cocos/core/pipeline/render-pipeline.ts b/cocos/core/pipeline/render-pipeline.ts
index ed398cdc9..09f1649e2 100644
--- a/cocos/core/pipeline/render-pipeline.ts
+++ b/cocos/core/pipeline/render-pipeline.ts
@@ -391,6 +391,7 @@ export abstract class RenderPipeline extends Asset implements IPipelineEvent, Pi
         this._pipelineUBO.activate(this._device, this);
         // update global defines in advance here for deferred pipeline may tryCompile shaders.
         this._macros.CC_USE_HDR = this._pipelineSceneData.isHDR;
+        this._macros.CC_USE_DEBUG_VIEW = 0;
         this._generateConstantMacros();
         this._pipelineSceneData.activate(this._device);
 
@@ -398,6 +399,7 @@ export abstract class RenderPipeline extends Asset implements IPipelineEvent, Pi
             this._flows[i].activate(this);
         }
 
+        legacyCC.debugView.activate();
         return true;
     }
 
